package homework;

public class Main {
    @Override
    public String toString() {
        return "Main{}";
    }

    //SOLID
    public static void main(String[] args) {
//создали экземпляры класса Box (объекты)
//        Box box1=new Box("red", 5);
//        Box box2=new Box("red", 5);
//
//        System.out.println(box1.equals(box2)); // объекты нельзя сравнивать через == (сравнивает ссылки в куче)
//        //сравнивать нужно через метод equals (метод класса Object) он будет сравнивать содержимое объектов, их поля
//
//        //Важно!! Если объекты равны их хэшкоды равны
//        System.out.println(box1.hashCode()); //3497301
//        System.out.println(box2.hashCode()); //3497301
//
//        System.out.println(box1.toString()); //toString - метод который представляет объект в строковом виде (по умолчанию это Класс@хэшкод)
//
//        //вывел homework.Box@355d55
//
//        //переопределим метод через Alt+Insert в классе Box
//
////КЛАССЫ ОБЕРТКИ например Integer, parseInt
//        //у каждого примитивного класса есть класс обертка и им и его специальными методами можно пользоваться
//String s1="java"; //объекты класса String не изменяемы
////        String s2="java";
////        String s3=new String ("java") ;
//
//        //в примере выше s1 и s2 равны, ссылаются на одно и тоже слово "java" в Stringpool (расположен в куче(heap)) - только для класса String
//        //s3 имеет новую ссылку в куче
//
//        //стринговые объекты тоже сравнивать через equals
////s1.equals(s2);
//
//
////отличия String от Stringbuilder():
////исползуем класс String, тогда при выполнении следующего цикла каждый раз будут создаваться новые объекты javaA, JavaAA, javaAAA и так все объекты
//        //при этом для каждого объекта выделяется оперативная память (около 40байт) и все они находятся в куче
//
//
//      //вот так со строками делать нельзя!!
////        for (int i = 0; i < 100; i++) {
////            s1+="А";
////        }
////слишком много памяти испльзовано  в пустую, поэтому используем метод StringBuilder который не создает новые объекты а меняет их ввнутри себя (мутабельный)
//
//   StringBuilder sb=new StringBuilder("java");
////        for (int i = 0; i < 100; i++) {
////sb.append("А");
////        }
//sb.append(45345);//append - добавляет к строке все что нужно
//        sb.reverse(); //выводит символы в обратном порядке
//        sb.insert(3, "WOOOW");//вставляет символы, числа, и т.д. в любом количестве в любое место, на указанную позицию (у нас 3) в строке
//        sb.delete(0,3);//удаляет
//        sb.replace(1,4,"^");//заменяет указанный диапазон на выбранный текст /символ
//
//        //есть класс StringBooffer делает тоже что и StringBuilder но он ПОТОКОБЕЗОПАСЕН (это на Java2)
//
//        String s=sb.toString();
//        System.out.println(s);
        
    }

}
